// Generated by CoffeeScript 1.7.1
(function() {
  var ObjectId, Video, backfillTag, checkIfSubscriptionExists, createSubscription, crypto, debug, extend, getCurrentSubscriptions, getMinInstagramId, getRandAccessToken, getVideo, getVideos, isValidRequest, processTag, redis, redisClient, request, saveVideo, setMinInstagramId, settings;

  crypto = require('crypto');

  request = require('request');

  extend = require('node.extend');

  Video = require('./models/video');

  ObjectId = require('mongoose').Types.ObjectId;

  settings = require('./settings');

  isValidRequest = function(request) {
    var calculatedSignature, encoding, hmac, providedSignature, rawBody;
    rawBody = JSON.stringify(request.body);
    hmac = crypto.createHmac('sha1', settings.CLIENT_SECRET);
    hmac.update(rawBody);
    providedSignature = request.headers['x-hub-signature'];
    calculatedSignature = hmac.digest(encoding = 'hex');
    return true;
  };

  debug = function(msg) {
    if (settings.debug) {
      return console.log(msg);
    }
  };

  checkIfSubscriptionExists = function(tagName, callback) {
    return redisClient.sismember(['subscriptions', tagName], callback);
  };

  createSubscription = function(tagName, instagram_access_token) {
    var params;
    debug('in createSubscription, access_token: ' + instagram_access_token);
    if (!instagram_access_token) {
      debug('You must be authenticated to create a subscription');
      return;
    }
    redisClient.sadd('tokens:' + tagName, instagram_access_token);
    params = {
      object_id: tagName,
      callback_url: settings.SUB_CALLBACK + tagName,
      complete: function(data, pagination) {
        return redisClient.sadd('subscriptions', tagName);
      },
      error: function(errorMessage, errorObject, caller) {
        return debug('maybeCreateSubscription: ' + errorMessage);
      }
    };
    if (instagram_access_token) {
      params = extend({}, params, {
        access_token: instagram_access_token
      });
    }
    return settings.inst.tags.subscribe(params);
  };

  backfillTag = function(tagName, num, maxInstagramId, instagram_access_token) {
    var query;
    debug('Backfilling tag: ' + tagName);
    query = Video.find({
      tags: tagName
    }).count();
    return query.exec(function(err, tagCount) {
      var params;
      if (tagCount >= num) {
        return;
      }
      params = {
        name: tagName,
        max_id: maxInstagramId,
        complete: function(data, pagination) {
          var media, newTagCount, videos;
          videos = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = data.length; _i < _len; _i++) {
              media = data[_i];
              if (media['type'] === 'video') {
                _results.push(saveVideo(media));
              }
            }
            return _results;
          })();
          newTagCount = tagCount + videos.length;
          if (newTagCount < num && typeof maxInstagramId !== 'undefined') {
            return backfillTag(tagName, num, pagination['next_max_id'], instagram_access_token);
          }
        },
        error: function(errorMessage, errorObject, caller) {
          return debug('error backfilling tag: ' + errorMessage);
        }
      };
      if (instagram_access_token) {
        params = extend({}, params, {
          access_token: instagram_access_token
        });
      }
      return settings.inst.tags.recent(params);
    });
  };

  processTag = function(tagName) {
    debug('Processing tag: ' + tagName);
    return getMinInstagramId(tagName, function(error, minInstagramId) {
      return getRandAccessToken(tagName, function(error, instagram_access_token) {
        var params;
        if (minInstagramId === "XXX") {
          debug('Request for ' + tagName + ' already in progress');
          return;
        }
        setMinInstagramId(tagName, 'XXX');
        debug('ACCESS_TOKEN: ' + instagram_access_token);
        params = {
          name: tagName,
          min_id: minInstagramId,
          complete: function(data, pagination) {
            var media, videos;
            setMinInstagramId(tagName, pagination['min_tag_id']);
            return videos = (function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = data.length; _i < _len; _i++) {
                media = data[_i];
                if (media['type'] === 'video') {
                  _results.push(saveVideo(media));
                }
              }
              return _results;
            })();
          },
          error: function(errorMessage, errorObject, caller) {
            setMinInstagramId(tagName, '');
            return debug('processTag: ' + errorMessage);
          }
        };
        if (instagram_access_token) {
          params = extend({}, params, {
            access_token: instagram_access_token
          });
        }
        return settings.inst.tags.recent(params);
      });
    });
  };

  getVideo = function(id, callback) {
    debug('finding video with _id: ' + id);
    return Video.findOne({
      _id: new ObjectId(id)
    }).exec(function(err, video) {
      if (err) {
        return debug('Error getting video: ' + err);
      } else {
        debug('found video: ' + video);
        return callback(err, video);
      }
    });
  };

  getVideos = function(tagName, minId, callback) {
    var query;
    debug('getting videos since: ' + minId);
    if (minId) {
      query = Video.find({
        tags: tagName,
        _id: {
          $gt: minId
        }
      }).sort('-received_at').limit(100);
    } else {
      debug('getting recent videos');
      query = Video.find({
        tags: tagName
      }).sort('-received_at').limit(20);
    }
    return query.exec(function(err, videos) {
      videos.reverse();
      if (err) {
        debug('Error in getVideos: ' + err);
      }
      if (videos.length === 0) {
        getRandAccessToken(tagName, function(error, instagram_access_token) {
          return backfillTag(tagName, 40, '', instagram_access_token);
        });
      }
      return callback(err, tagName, videos);
    });
  };

  saveVideo = function(media) {
    var video, videoData;
    videoData = {
      instagram_id: media['id'],
      external_created_at: media['created_time'],
      user: {
        profile_picture: media['user']['profile_picture'],
        username: media['user']['username'],
        full_name: media['user']['full_name']
      },
      preview: media['images']['standard_resolution'],
      sources: {
        hi: media['videos']['standard_resolution']['url'],
        lo: media['videos']['low_resolution']['url']
      },
      tags: media['tags']
    };
    if (media['caption']) {
      videoData = extend({}, videoData, {
        caption: media['caption']['text']
      });
    }
    if (media['location']) {
      videoData = extend({}, videoData, {
        location: {
          latitude: media['location']['latitude'],
          longitude: media['location']['longitude'],
          name: media['location']['name']
        }
      });
    }
    video = new Video(videoData);
    video.save(function(err, video) {
      if (err) {
        return console.error('error saving video: ' + err);
      }
    });
    return video;
  };

  getMinInstagramId = function(tagName, callback) {
    return redisClient.get('min-instagram-id:channel:' + tagName, callback);
  };

  setMinInstagramId = function(tagName, min_tag_instagram_id) {
    var e;
    try {
      if (!min_tag_instagram_id) {
        min_tag_instagram_id = '';
      }
      debug('setting min_tag_instagram_id: ' + min_tag_instagram_id);
      return redisClient.set('min-instagram-id:channel:' + tagName, min_tag_instagram_id);
    } catch (_error) {
      e = _error;
      console.log('Error parsing min instagram Id');
      return console.log(e);
    }
  };

  getRandAccessToken = function(tagName, callback) {
    return redisClient.srandmember('tokens:' + tagName, callback);
  };

  getCurrentSubscriptions = function(callback) {
    var subscriptions;
    return subscriptions = redisClient.lrange('subscriptions', 0, -1, function(error, media) {
      return callback(error, tagName, media);
    });
  };

  redis = require('redis');

  redisClient = redis.createClient(settings.REDIS_URL);

  exports.isValidRequest = isValidRequest;

  exports.debug = debug;

  exports.createSubscription = createSubscription;

  exports.processTag = processTag;

  exports.getVideo = getVideo;

  exports.getVideos = getVideos;

  exports.getMinInstagramId = getMinInstagramId;

  exports.setMinInstagramId = setMinInstagramId;

  exports.checkIfSubscriptionExists = checkIfSubscriptionExists;

}).call(this);
