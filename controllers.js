// Generated by CoffeeScript 1.7.1
(function() {
  var app, helpers, redis, settings, subscriptions, url;

  url = require('url');

  redis = require('redis');

  settings = require('./settings');

  helpers = require('./helpers');

  subscriptions = require('./subscriptions');

  app = settings.app;

  app.get('/callbacks/tag/:tagName', function(request, response) {
    var params;
    helpers.debug('GET ' + request.url);
    params = url.parse(request.url, true).query;
    return response.send(params['hub.challenge'] || 'No hub.challenge present');
  });

  app.post('/callbacks/tag/:tagName', function(request, response) {
    var index, tagName, update, updates;
    tagName = request.params.tagName;
    helpers.debug('POST /callbacks/tag/' + tagName);
    if (!helpers.isValidRequest(request)) {
      helpers.debug('failed request validation');
      response.send('FAIL');
      return;
    }
    updates = request.body;
    for (index in updates) {
      update = updates[index];
      if (update['object'] === 'tag') {
        helpers.processTag(tagName);
      }
    }
    helpers.debug('Processed ' + updates.length + ' updates');
    return response.send('OK');
  });

  app.get('/', function(request, response) {
    var authed, external_auth_url, tagName;
    helpers.debug('GET /');
    tagName = 'video';
    external_auth_url = settings.inst.oauth.authorization_url({
      scope: 'basic',
      display: 'touch'
    });
    authed = typeof request.session.instagram_access_token !== 'undefined';
    helpers.debug('instagram access token: ' + request.session.instagram_access_token);
    return response.render('tv.jade', {
      tag: tagName,
      authed: authed,
      external_auth_url: external_auth_url
    });
  });

  app.get('/tag/:tagName', function(request, response) {
    var instagram_access_token, minId, tagName;
    tagName = request.params.tagName;
    minId = request.query.minId;
    instagram_access_token = request.session.instagram_access_token;
    if (minId) {
      helpers.debug('GET /tag/' + tagName + '?minId=' + minId);
    } else {
      helpers.debug('GET /tag/' + tagName);
    }
    return helpers.checkIfSubscriptionExists(tagName, function(err, reply) {
      var subscriptionAlreadyExists;
      subscriptionAlreadyExists = reply;
      if (!subscriptionAlreadyExists) {
        if (!instagram_access_token) {
          return response.send(401);
        }
        helpers.createSubscription(tagName, request.session.instagram_access_token);
      }
      return helpers.getVideos(tagName, minId, function(error, tagName, media) {
        return response.json({
          tag: tagName,
          videos: media
        });
      });
    });
  });

  app.get('/channel/:tagName/video/:id', function(request, response) {
    var authed, external_auth_url, tagName, videoId;
    tagName = request.params.tagName;
    videoId = request.params.id;
    external_auth_url = settings.inst.oauth.authorization_url({
      scope: 'basic',
      display: 'touch'
    });
    authed = typeof request.session.instagram_access_token !== 'undefined';
    return response.render('tv.jade', {
      tag: tagName,
      video_id: videoId,
      authed: authed,
      external_auth_url: external_auth_url
    });
  });

  app.get('/tag/:tagName/video/:id', function(request, response) {
    var tagName, videoId;
    tagName = request.params.tagName;
    videoId = request.params.id;
    return helpers.getVideo(videoId, function(error, video) {
      if (error) {
        helpers.debug(error);
      }
      return response.json({
        tag: tagName,
        videos: [video]
      });
    });
  });

  app.get('/channel/:tagName', function(request, response) {
    var authed, external_auth_url, minId, tagName;
    tagName = request.params.tagName;
    minId = request.query.minId;
    helpers.debug('GET /' + tagName);
    external_auth_url = settings.inst.oauth.authorization_url({
      scope: 'basic',
      display: 'touch'
    });
    authed = typeof request.session.instagram_access_token !== 'undefined';
    helpers.debug('instagram access token: ' + request.session.instagram_access_token);
    return helpers.getVideos(tagName, minId, function(error, tagName, media) {
      return response.render('tv.jade', {
        tag: tagName,
        authed: authed,
        external_auth_url: external_auth_url
      });
    });
  });

  app.get('/oauth/callback', function(request, response) {
    helpers.debug('GET /oauth/callback');
    return settings.inst.oauth.ask_for_access_token({
      request: request,
      response: response,
      complete: function(params, response) {
        request.session.instagram_access_token = params['access_token'];
        request.session.instagram_user = params['user'];
        return response.redirect('/');
      },
      error: function(errorMessage, errorObject, caller, response) {}
    });
  });

}).call(this);
